syntax enable           " enable syntax highlighting
set expandtab           " tabs are spaces
set ts=4                " tabstop is 4 (default 8)
set sw=4                " shiftwidth is 4 (default 8)
set tw=72               " textwidth is 72
set modeline            " follow modes set in a file (possible security issue)
set modelines=5         " sometimes need this for mac
set ignorecase          " ignore case in search
set smartcase           " case-insensitive search if all lowercase
set autoindent          " interactive indenting
set fo+=2n              " :help fo-table (recognize numbered lists)
"set spell              " enable spell check as we go
set autochdir           " change working directory when we switch tabs

" use Markdown syntax for .md files
autocmd BufRead,BufNew *.md set filetype=markdown

" fold region for headings
au FileType markdown syn region mkdHeaderFold
    \ start="^\s*\z(#\+\)"
    \ skip="^\s*\z1#\+"
    \ end="^\(\s*#\)\@="
    \ fold contains=TOP

" fold region for lists
"au FileType markdown syn region mkdListFold
"    \ start="^\z(\s*\)\*\z(\s*\)"
"    \ skip="^\z1 \z2\s*[^#]"
"    \ end="^\(.\)\@="
"    \ fold contains=TOP
"
au FileType markdown syn sync fromstart
au FileType markdown setlocal foldmethod=syntax

" signature for documents
:noremap <F2> ---calvin <C-R>=strftime("%Y-%m-%d")<CR>
:inoremap <F2> ---calvin <C-R>=strftime("%Y-%m-%d")<CR>
" having the date is useful
" (e.g., `:w <F3>` to write to a file of today's date
:inoremap <F3> <C-R>=strftime("%Y-%m-%d")<CR>
:cnoremap <F3> <C-R>=strftime("%Y-%m-%d")<CR>
" call common compiling utilities
":noremap <F6> :!python %<CR>
:noremap <F6> :!%:p<CR>
:noremap <F7> :!pdflatex %<CR>
:noremap <F8> :!make<CR>
:noremap <F9> :!tablign<CR>

" save and load manual folds
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

function! TwiddleCase(str)
  if a:str ==# toupper(a:str)
    let result = tolower(a:str)
  elseif a:str ==# tolower(a:str)
    let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
  else
    let result = toupper(a:str)
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv

set cursorline
:hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
:hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
:nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>

" highlight extra whitespaces at the end
:highlight ExtraWhitespace ctermbg=red guibg=red
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

:set rtp+=/opt/local/share/fzf/vim
